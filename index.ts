/**
 * Schemats takes sql database schema and creates corresponding typescript definitions
 * Created by xiamx on 2016-08-10.
 */

import {generateEnumType, generateTableTypes, generateTableInterface, myGenerateTableInterface} from './typescript'
import {getDatabase, Database} from './schema'
import Options, {CAMELCASE_OPTIONS, OptionValues} from './options'
import {processString, Options as ITFOptions} from 'typescript-formatter'
import * as fs from "fs";
import {SchemaDefinition, TableDefinition} from "./schemaInterfaces";
import {generateFiles} from "../ts_demo1/src/templateGenerator";

const pkgVersion = require('./package.json').version

function getTime() {
    let padTime = (value: number) => `0${value}`.slice(-2)
    let time = new Date()
    const yyyy = time.getFullYear()
    const MM = padTime(time.getMonth() + 1)
    const dd = padTime(time.getDate())
    const hh = padTime(time.getHours())
    const mm = padTime(time.getMinutes())
    const ss = padTime(time.getSeconds())
    return `${yyyy}-${MM}-${dd} ${hh}:${mm}:${ss}`
}

function buildHeader(db: Database, tables: string[], schema: string | null, options: OptionValues): string {
    let commands = ['schemats', 'generate', '-c', db.connectionString.replace(/:\/\/.*@/, '://username:password@')]
    if (options.camelCase) commands.push('-C')
    if (tables.length > 0) {
        tables.forEach((t: string) => {
            commands.push('-t', t)
        })
    }
    if (schema) {
        commands.push('-s', schema)
    }

    //临时去掉
    // `
    //     /**
    //      * AUTO-GENERATED FILE @ ${getTime()} - DO NOT EDIT!
    //      *
    //      * This file was automatically generated by ts_demo v.${pkgVersion}
    //      * $ ${commands.join(' ')}
    //      *
    //      */
    //
    // `
    return`
    /**
     * AUTO-GENERATED FILE @ ${getTime()} - DO NOT EDIT!
     *
     * This file was automatically generated by ts_demo v.${pkgVersion}
     * 
     *
     */\n\n\n`
}

export async function typescriptOfTable(db: Database | string,
                                        outputPath: string,
                                        table: string,
                                        schema: string,
                                        options = new Options(),
                                        schemaDefinition: SchemaDefinition) {
    if (typeof db === 'string') {
        db = getDatabase(db)
    }

    let interfaces = ''
    //let tableTypes = await db.getTableTypes(table, schema, options)
    let tableTypes = await db.myGetTableTypes(table, schema, options)
    interfaces += generateTableTypes(table, tableTypes, options)
   // let interfaceFile = generateTableInterface(table, tableTypes, options);
    //自己的方法
    let myInterfaceFile = myGenerateTableInterface(table, tableTypes, options, schemaDefinition);
    await generateInterfaceFile(outputPath, table, myInterfaceFile);



    await generateDao(table, tableTypes, options, schemaDefinition);
    interfaces += myInterfaceFile;
    return myInterfaceFile;
}
async function generateDao(table: string, tableTypes: TableDefinition, options: Options, schemaDefinition: SchemaDefinition) {
        schemaDefinition[table].tableDefinition = tableTypes;
        console.log("================打印数据实体=============")
        console.log(JSON.stringify(schemaDefinition[table]));
    generateFiles(schemaDefinition,table,"aaa")




}
async function generateInterfaceFile(outputPath: string, tableName: string, interfaceString: string) {
    function convertToCamelCase(name: string): string {
        return name.replace(/_([a-z])/g, (match, char) => char.toUpperCase());
    }

    async function formatter(fileName: string, output: string) {
        const formatterOption: ITFOptions = {
            replace: false,
            verify: false,
            tsconfig: true,
            tslint: true,
            editorconfig: true,
            tsfmt: true,
            vscode: false,
            tsconfigFile: null,
            tslintFile: null,
            vscodeFile: null,
            tsfmtFile: null
        }

        const processedResult = await processString(fileName, output, formatterOption)
        return processedResult.dest;
    }


    const camelCaseName = convertToCamelCase(tableName);
    const fileName = `${camelCaseName}.ts`;
    interfaceString = await formatter(fileName, interfaceString);
    // console.log( `
    //     /**
    //      * AUTO-GENERATED FILE @ ${getTime()} - DO NOT EDIT!
    //      *
    //      * This file was automatically generated by schemats v.${pkgVersion}
    //      * $ ${commands.join(' ')}
    //      *
    //      */
    //
    // `)
    const path = require('path');

    // 获取当前执行脚本的目录作为项目根目录
    const rootPath = path.resolve(__dirname);
    console.log("==============rootPath=============\n" + rootPath);
    console.log("=====================================")
    // 将outputPath转换为正常的包目录结构
    const outputPathParts = outputPath.split('.');
    const normalizedOutputPath = outputPathParts.join(path.sep);
    const fullOutputPath = path.join(rootPath, normalizedOutputPath);
    console.log("==========fullOutputPath===========\n" + fullOutputPath);
    console.log("=====================================\n");

    // 检查目录是否存在，如果不存在则创建
    if (!fs.existsSync(fullOutputPath)) {
        fs.mkdirSync(fullOutputPath, {recursive: true});
        console.log("Directory created: \n" + fullOutputPath+"\n");
    } else {
        console.log("Directory already exists: \n" + fullOutputPath+"\n");
    }

    // 使用修改后的完整输出路径保存文件
    fs.writeFileSync(path.join(fullOutputPath, fileName), interfaceString);
    console.log("File saved successfully at: \n" + path.join(fullOutputPath, fileName)+"\n");


    //fs.writeFileSync(fileName, interfaceString);
    console.log(`Interface file for table ${tableName} generated and saved to ${fileName}`+"\n");


    //生成DAO Service Controller 代码

    //Dao
}


export async function typescriptOfSchema(db: Database | string,
                                         tables: string[] = [],
                                         outputPath: string,
                                         schema: string | null = null,
                                         options: OptionValues = CAMELCASE_OPTIONS
                                         //options: OptionValues = {}
): Promise<string> {
    if (typeof db === 'string') {
        db = getDatabase(db)
    }

    if (!schema) {
        schema = db.getDefaultSchema()
    }

    if (tables.length === 0) {
        tables = await db.getSchemaTables(schema)
    }

    const optionsObject = new Options(options)

    const enumTypes = generateEnumType(await db.getEnumTypes(schema), optionsObject)
    const schemaDefinition = await db.myGetTableComments(tables, schema)
    const interfacePromises = tables.map((table) => typescriptOfTable(db, outputPath, table, schema as string, optionsObject, schemaDefinition))
    const interfaces = await Promise.all(interfacePromises)
        .then(tsOfTable => tsOfTable.join(''))
    let output = '/* tslint:disable */\n\n'
    if (optionsObject.options.writeHeader) {
        output += buildHeader(db, tables, schema, options)
    }
    //output += enumTypes
    output += interfaces

    const formatterOption: ITFOptions = {
        replace: false,
        verify: false,
        tsconfig: true,
        tslint: true,
        editorconfig: true,
        tsfmt: true,
        vscode: false,
        tsconfigFile: null,
        tslintFile: null,
        vscodeFile: null,
        tsfmtFile: null
    }

    const processedResult = await processString("schema.ts", output, formatterOption)
    return processedResult.dest;
   // return output;
}

export {Database, getDatabase} from './schema'
export {Options, OptionValues}
